// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreetEye.data;

#nullable disable

namespace StreetEye.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StreetEye.models.HistoricoUsuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime>("Momento")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSemaforo")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdUsuario", "Momento");

                    b.HasIndex("IdSemaforo");

                    b.ToTable("historico_usuarios", (string)null);
                });

            modelBuilder.Entity("StreetEye.models.Responsavel", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<int>("IdResponsavel")
                        .HasColumnType("int");

                    b.HasKey("IdUtilizador", "IdResponsavel");

                    b.HasIndex("IdResponsavel");

                    b.ToTable("responsaveis", (string)null);
                });

            modelBuilder.Entity("StreetEye.models.Semaforo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("IntervaloAberto")
                        .HasColumnType("int");

                    b.Property<int>("IntervaloFechado")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ViaCruzamento")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("semaforos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Principal",
                            Endereco = "Rua Alcantara",
                            IntervaloAberto = 20,
                            IntervaloFechado = 40,
                            Latitude = "-23.519502072656618",
                            Longitude = "-46.59639509306988",
                            Numero = "113",
                            ViaCruzamento = "Guilherme Cotching"
                        });
                });

            modelBuilder.Entity("StreetEye.models.StatusSemaforo", b =>
                {
                    b.Property<int>("IdSemaforo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Momento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<bool>("StatusAudio")
                        .HasColumnType("bit");

                    b.Property<bool>("StatusVisor")
                        .HasColumnType("bit");

                    b.HasKey("IdSemaforo", "Momento");

                    b.ToTable("status_semaforo", (string)null);
                });

            modelBuilder.Entity("StreetEye.models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdUtilizador");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("StreetEye.models.UsuarioImagem", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdUsuario");

                    b.ToTable("usuario_imagem", (string)null);
                });

            modelBuilder.Entity("StreetEye.models.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("char(9)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroEndereco")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.HasKey("Id");

                    b.HasIndex("Nome");

                    b.ToTable("utilizadores", (string)null);
                });

            modelBuilder.Entity("StreetEye.models.HistoricoUsuario", b =>
                {
                    b.HasOne("StreetEye.models.Semaforo", "Semaforo")
                        .WithMany("Historicos")
                        .HasForeignKey("IdSemaforo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetEye.models.Usuario", "Usuario")
                        .WithMany("Historicos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semaforo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("StreetEye.models.Responsavel", b =>
                {
                    b.HasOne("StreetEye.models.Utilizador", "ResponsavelUtilizador")
                        .WithMany()
                        .HasForeignKey("IdResponsavel")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StreetEye.models.Utilizador", "Utilizador")
                        .WithMany("Responsaveis")
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ResponsavelUtilizador");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("StreetEye.models.StatusSemaforo", b =>
                {
                    b.HasOne("StreetEye.models.Semaforo", "Semaforo")
                        .WithMany("Status")
                        .HasForeignKey("IdSemaforo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semaforo");
                });

            modelBuilder.Entity("StreetEye.models.Usuario", b =>
                {
                    b.HasOne("StreetEye.models.Utilizador", "Utilizador")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("StreetEye.models.UsuarioImagem", b =>
                {
                    b.HasOne("StreetEye.models.Usuario", "Usuario")
                        .WithOne("UsuarioImagem")
                        .HasForeignKey("StreetEye.models.UsuarioImagem", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("StreetEye.models.Semaforo", b =>
                {
                    b.Navigation("Historicos");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StreetEye.models.Usuario", b =>
                {
                    b.Navigation("Historicos");

                    b.Navigation("UsuarioImagem");
                });

            modelBuilder.Entity("StreetEye.models.Utilizador", b =>
                {
                    b.Navigation("Responsaveis");

                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
